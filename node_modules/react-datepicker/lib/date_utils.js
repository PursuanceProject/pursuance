'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.newDate = newDate;
exports.newDateWithOffset = newDateWithOffset;
exports.now = now;
exports.cloneDate = cloneDate;
exports.parseDate = parseDate;
exports.isMoment = isMoment;
exports.isDate = isDate;
exports.formatDate = formatDate;
exports.safeDateFormat = safeDateFormat;
exports.setTime = setTime;
exports.setMonth = setMonth;
exports.setYear = setYear;
exports.setUTCOffset = setUTCOffset;
exports.getSecond = getSecond;
exports.getMinute = getMinute;
exports.getHour = getHour;
exports.getDay = getDay;
exports.getWeek = getWeek;
exports.getMonth = getMonth;
exports.getYear = getYear;
exports.getDate = getDate;
exports.getUTCOffset = getUTCOffset;
exports.getDayOfWeekCode = getDayOfWeekCode;
exports.getStartOfDay = getStartOfDay;
exports.getStartOfWeek = getStartOfWeek;
exports.getStartOfMonth = getStartOfMonth;
exports.getStartOfDate = getStartOfDate;
exports.getEndOfWeek = getEndOfWeek;
exports.getEndOfMonth = getEndOfMonth;
exports.addMinutes = addMinutes;
exports.addDays = addDays;
exports.addWeeks = addWeeks;
exports.addMonths = addMonths;
exports.addYears = addYears;
exports.subtractDays = subtractDays;
exports.subtractWeeks = subtractWeeks;
exports.subtractMonths = subtractMonths;
exports.subtractYears = subtractYears;
exports.isBefore = isBefore;
exports.isAfter = isAfter;
exports.equals = equals;
exports.isSameMonth = isSameMonth;
exports.isSameDay = isSameDay;
exports.isSameUtcOffset = isSameUtcOffset;
exports.isDayInRange = isDayInRange;
exports.getDaysDiff = getDaysDiff;
exports.localizeDate = localizeDate;
exports.getDefaultLocale = getDefaultLocale;
exports.getDefaultLocaleData = getDefaultLocaleData;
exports.registerLocale = registerLocale;
exports.getLocaleData = getLocaleData;
exports.getLocaleDataForLocale = getLocaleDataForLocale;
exports.getWeekdayMinInLocale = getWeekdayMinInLocale;
exports.getWeekdayShortInLocale = getWeekdayShortInLocale;
exports.getMonthInLocale = getMonthInLocale;
exports.isDayDisabled = isDayDisabled;
exports.isTimeDisabled = isTimeDisabled;
exports.isTimeInDisabledRange = isTimeInDisabledRange;
exports.allDaysDisabledBefore = allDaysDisabledBefore;
exports.allDaysDisabledAfter = allDaysDisabledAfter;
exports.getEffectiveMinDate = getEffectiveMinDate;
exports.getEffectiveMaxDate = getEffectiveMaxDate;

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var dayOfWeekCodes = {
  1: 'mon',
  2: 'tue',
  3: 'wed',
  4: 'thu',
  5: 'fri',
  6: 'sat',
  7: 'sun'

  // These functions are not exported so
  // that we avoid magic strings like 'days'
};function set(date, unit, to) {
  return date.set(unit, to);
}

function add(date, amount, unit) {
  return date.add(amount, unit);
}

function subtract(date, amount, unit) {
  return date.subtract(amount, unit);
}

function get(date, unit) {
  return date.get(unit);
}

function getStartOf(date, unit) {
  return date.startOf(unit);
}

function getEndOf(date, unit) {
  return date.endOf(unit);
}

function getDiff(date1, date2, unit) {
  return date1.diff(date2, unit);
}

function isSame(date1, date2, unit) {
  return date1.isSame(date2, unit);
}

// ** Date Constructors **

function newDate(point) {
  return (0, _moment2.default)(point);
}

function newDateWithOffset(utcOffset) {
  return (0, _moment2.default)().utc().utcOffset(utcOffset);
}

function now(maybeFixedUtcOffset) {
  if (maybeFixedUtcOffset == null) {
    return newDate();
  }
  return newDateWithOffset(maybeFixedUtcOffset);
}

function cloneDate(date) {
  return date.clone();
}

function parseDate(value, _ref) {
  var dateFormat = _ref.dateFormat,
      locale = _ref.locale;

  var m = (0, _moment2.default)(value, dateFormat, locale || _moment2.default.locale(), true);
  return m.isValid() ? m : null;
}

// ** Date "Reflection" **

function isMoment(date) {
  return _moment2.default.isMoment(date);
}

function isDate(date) {
  return _moment2.default.isDate(date);
}

// ** Date Formatting **

function formatDate(date, format) {
  return date.format(format);
}

function safeDateFormat(date, _ref2) {
  var dateFormat = _ref2.dateFormat,
      locale = _ref2.locale;

  return date && date.clone().locale(locale || _moment2.default.locale()).format(Array.isArray(dateFormat) ? dateFormat[0] : dateFormat) || '';
}

// ** Date Setters **

function setTime(date, _ref3) {
  var hour = _ref3.hour,
      minute = _ref3.minute,
      second = _ref3.second;

  date.set({ hour: hour, minute: minute, second: second });
  return date;
}

function setMonth(date, month) {
  return set(date, 'month', month);
}

function setYear(date, year) {
  return set(date, 'year', year);
}

function setUTCOffset(date, offset) {
  return date.utcOffset(offset);
}

// ** Date Getters **

function getSecond(date) {
  return get(date, 'second');
}

function getMinute(date) {
  return get(date, 'minute');
}

function getHour(date) {
  return get(date, 'hour');
}

// Returns day of week
function getDay(date) {
  return get(date, 'day');
}

function getWeek(date) {
  return get(date, 'week');
}

function getMonth(date) {
  return get(date, 'month');
}

function getYear(date) {
  return get(date, 'year');
}

// Returns day of month
function getDate(date) {
  return get(date, 'date');
}

function getUTCOffset() {
  return (0, _moment2.default)().utcOffset();
}

function getDayOfWeekCode(day) {
  return dayOfWeekCodes[day.isoWeekday()];
}

// *** Start of ***

function getStartOfDay(date) {
  return getStartOf(date, 'day');
}

function getStartOfWeek(date) {
  return getStartOf(date, 'week');
}
function getStartOfMonth(date) {
  return getStartOf(date, 'month');
}

function getStartOfDate(date) {
  return getStartOf(date, 'date');
}

// *** End of ***

function getEndOfWeek(date) {
  return getEndOf(date, 'week');
}

function getEndOfMonth(date) {
  return getEndOf(date, 'month');
}

// ** Date Math **

// *** Addition ***

function addMinutes(date, amount) {
  return add(date, amount, 'minutes');
}

function addDays(date, amount) {
  return add(date, amount, 'days');
}

function addWeeks(date, amount) {
  return add(date, amount, 'weeks');
}

function addMonths(date, amount) {
  return add(date, amount, 'months');
}

function addYears(date, amount) {
  return add(date, amount, 'years');
}

// *** Subtraction ***
function subtractDays(date, amount) {
  return subtract(date, amount, 'days');
}

function subtractWeeks(date, amount) {
  return subtract(date, amount, 'weeks');
}

function subtractMonths(date, amount) {
  return subtract(date, amount, 'months');
}

function subtractYears(date, amount) {
  return subtract(date, amount, 'years');
}

// ** Date Comparison **

function isBefore(date1, date2) {
  return date1.isBefore(date2);
}

function isAfter(date1, date2) {
  return date1.isAfter(date2);
}

function equals(date1, date2) {
  return date1.isSame(date2);
}

function isSameMonth(date1, date2) {
  return isSame(date1, date2, 'month');
}

function isSameDay(moment1, moment2) {
  if (moment1 && moment2) {
    return moment1.isSame(moment2, 'day');
  } else {
    return !moment1 && !moment2;
  }
}

function isSameUtcOffset(moment1, moment2) {
  if (moment1 && moment2) {
    return moment1.utcOffset() === moment2.utcOffset();
  } else {
    return !moment1 && !moment2;
  }
}

function isDayInRange(day, startDate, endDate) {
  var before = startDate.clone().startOf('day').subtract(1, 'seconds');
  var after = endDate.clone().startOf('day').add(1, 'seconds');
  return day.clone().startOf('day').isBetween(before, after);
}

// *** Diffing ***

function getDaysDiff(date1, date2) {
  return getDiff(date1, date2, 'days');
}

// ** Date Localization **

function localizeDate(date, locale) {
  return date.clone().locale(locale || _moment2.default.locale());
}

function getDefaultLocale() {
  return _moment2.default.locale();
}

function getDefaultLocaleData() {
  return _moment2.default.localeData();
}

function registerLocale(localeName, localeData) {
  _moment2.default.defineLocale(localeName, localeData);
}

function getLocaleData(date) {
  return date.localeData();
}

function getLocaleDataForLocale(locale) {
  return _moment2.default.localeData(locale);
}

function getWeekdayMinInLocale(locale, date) {
  return locale.weekdaysMin(date);
}

function getWeekdayShortInLocale(locale, date) {
  return locale.weekdaysShort(date);
}

// TODO what is this format exactly?
function getMonthInLocale(locale, date, format) {
  return locale.months(date, format);
}

// ** Utils for some components **

function isDayDisabled(day) {
  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      minDate = _ref4.minDate,
      maxDate = _ref4.maxDate,
      excludeDates = _ref4.excludeDates,
      includeDates = _ref4.includeDates,
      filterDate = _ref4.filterDate;

  return minDate && day.isBefore(minDate, 'day') || maxDate && day.isAfter(maxDate, 'day') || excludeDates && excludeDates.some(function (excludeDate) {
    return isSameDay(day, excludeDate);
  }) || includeDates && !includeDates.some(function (includeDate) {
    return isSameDay(day, includeDate);
  }) || filterDate && !filterDate(day.clone()) || false;
}

function isTimeDisabled(time, disabledTimes) {
  var l = disabledTimes.length;
  for (var i = 0; i < l; i++) {
    if (disabledTimes[i].get('hours') === time.get('hours') && disabledTimes[i].get('minutes') === time.get('minutes')) {
      return true;
    }
  }

  return false;
}

function isTimeInDisabledRange(time, _ref5) {
  var minTime = _ref5.minTime,
      maxTime = _ref5.maxTime;

  if (!minTime || !maxTime) {
    throw new Error('Both minTime and maxTime props required');
  }

  var base = (0, _moment2.default)().hours(0).minutes(0).seconds(0);
  var baseTime = base.clone().hours(time.get('hours')).minutes(time.get('minutes'));
  var min = base.clone().hours(minTime.get('hours')).minutes(minTime.get('minutes'));
  var max = base.clone().hours(maxTime.get('hours')).minutes(maxTime.get('minutes'));

  return !(baseTime.isSameOrAfter(min) && baseTime.isSameOrBefore(max));
}

function allDaysDisabledBefore(day, unit) {
  var _ref6 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      minDate = _ref6.minDate,
      includeDates = _ref6.includeDates;

  var dateBefore = day.clone().subtract(1, unit);
  return minDate && dateBefore.isBefore(minDate, unit) || includeDates && includeDates.every(function (includeDate) {
    return dateBefore.isBefore(includeDate, unit);
  }) || false;
}

function allDaysDisabledAfter(day, unit) {
  var _ref7 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      maxDate = _ref7.maxDate,
      includeDates = _ref7.includeDates;

  var dateAfter = day.clone().add(1, unit);
  return maxDate && dateAfter.isAfter(maxDate, unit) || includeDates && includeDates.every(function (includeDate) {
    return dateAfter.isAfter(includeDate, unit);
  }) || false;
}

function getEffectiveMinDate(_ref8) {
  var minDate = _ref8.minDate,
      includeDates = _ref8.includeDates;

  if (includeDates && minDate) {
    return _moment2.default.min(includeDates.filter(function (includeDate) {
      return minDate.isSameOrBefore(includeDate, 'day');
    }));
  } else if (includeDates) {
    return _moment2.default.min(includeDates);
  } else {
    return minDate;
  }
}

function getEffectiveMaxDate(_ref9) {
  var maxDate = _ref9.maxDate,
      includeDates = _ref9.includeDates;

  if (includeDates && maxDate) {
    return _moment2.default.max(includeDates.filter(function (includeDate) {
      return maxDate.isSameOrAfter(includeDate, 'day');
    }));
  } else if (includeDates) {
    return _moment2.default.max(includeDates);
  } else {
    return maxDate;
  }
}
